git add .
git commit
git status
git diff: 比较的是工作目录与暂存区的区别
git diff --cached:  比较的是暂存区与本地仓库的区别
git diff HEAD:  比较的是工作目录与本地仓库的区别
任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）

已修改表示修改了某个文件，但还没有提交保存；
即工作区有文件未执行git add

已暂存表示把已修改的文件放在下次提交时要保存的清单中；
即工作区已修改的文件已执行git add提交到暂存区（未执行git commit）

已提交表示该文件已经被安全地保存在本地数据库中了
已修改的文件已执行git commit将暂存区文件提交到本地仓库

Git 管理项目时，文件流转的三个工作区域：工作目录，暂存区域，以及本地仓库


将本地文件夹提交至远程github步骤：
1. git init  初始化项目根文件夹
2. git add . 将文件夹下所有文件提交至缓存区
3. git commit 将暂存区文件提交至本地仓库、
4. github 上申请新仓库，复制其SSH地址
5. git remote add origin git@github.com:ntyz/learngit.git
若出错信息：fatal: remote origin already exists.则先 git remote rm origin
6. 首次提交git push -u origin master
7. 以后对该项目修改提交至github时只要本地作了提交，就可以通过命令
 git push origin master 把本地master分支的最新修改推送至GitHub
 
 关联一个远程库
 git remote add origin git@server-name:path/repo-name.git
 推送master分支的所有内容
 git push -u origin master
 
 Git允许我们在版本的历史之间穿梭
 git reset --hard commit_id
 
查看提交历史，以便确定要回退到哪个版本
 git log
 
查看命令历史，以便确定要回到未来的哪个版本
 git reflog
 
删除一个文件
 git rm
 git commit
 
误删本地文件且还未提交时
git checkout -- test.txt ‘一键还原’

分支操作
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

看到分支合并图
git log --graph
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并
git merge --no-ff -m "merge with no-ff" 分支name

推送当前分支并建立与远程上游的跟踪
git push --set-upstream origin branch-name

删除远程分支
git push -d origin branch-name

查看远程分支
git branch -r

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

查看工作现场
git stash list
恢复现场
git stash apply stash@{0}

丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突
